 <ScrollView style={{ flex: 1, marginTop: 30 }}>
      <View style={{ flexDirection: 'row' }}>

        {/* Columna Izquierda */}
        <View style={{ flex: 1, alignItems: 'center' }}>
          <TouchableOpacity onPress={openModal} style={[ styles.button, { marginBottom: 35, alignItems: 'center' } ]}>
            <Text style={styles.buttonText}>Agregar ciudad</Text>
          </TouchableOpacity>

          <FlatList
            data={sortedCities}
            keyExtractor={(item, index) => index.toString()}
            renderItem={({ item }) => (
              <View style={{ marginTop: 10, height: 45 }}>
                <TouchableOpacity onPress={() => navigateToDetail(item)}>
                  <Text 
                    style={[styles.cityText,{}]}
                    >
                      Día {item.day}  {item.name}
                  </Text>
                </TouchableOpacity>
              </View>
            )}
          />
        </View>

        {/* Columna Derecha */}
        <View style={{ flex: 1, alignItems: 'center'}}>
          <TouchableOpacity onPress={openFilterModal} style={[ styles.button, { marginBottom: 35, alignItems: 'center' } ]}>
            <Text style={styles.buttonText}>Filtrar ciudad</Text>
          </TouchableOpacity>

          {/* Botón de editar y eliminar */}
            {sortedCities.map((item, index) => (
              <View key={index} style={{ flexDirection: 'row', marginTop: 10, height: 45 }}>
                <TouchableOpacity onPress={() => navigateToDetail(item)}>
                  <AntDesign 
                    name="edit" 
                    size={23} 
                    color="black" 
                    style={{ marginTop: 4,  marginRight: 35, marginVertical: 5}} />
                </TouchableOpacity>
                <TouchableOpacity onPress={() => deleteCity(item.name)} >
                  <AntDesign 
                    name="delete"
                    size={23} 
                    color="black"  
                    style={{ marginTop: 3, marginLeft: 35, marginVertical: 5 }}/>
                </TouchableOpacity>
              </View>
            ))}
          
          {/* Contenido del modal de filtro */}
          <Modal
            animationType="slide"
            transparent={true}
            visible={filterModalVisible}
            onRequestClose={closeFilterModal}
            >
            <View style={styles.modalContainer}>
            {/* Botón para cerrar el modal */}
              <TouchableOpacity onPress={closeFilterModal} style={styles.closeButton}>
                <AntDesign name="close" size={20} color="white" />
              </TouchableOpacity>

              {/* Campo para aplicar un filtro por ciudad*/}
              <TextInput
                style={styles.input}
                onChangeText={text => setCityFilter(text)}
                value={cityFilter}
                placeholder="Introduce una ciudad"
              />

              {/* Botón para aplicar el filtro */}
              <TouchableOpacity onPress={applyFilter} style={[styles.buttonModal, { marginBottom: 10 }]}>
                <Text style={styles.buttonText}>Aplicar filtro</Text>
              </TouchableOpacity>
              {/* Botón para aplicar el filtro */}
              <TouchableOpacity onPress={resetFilter} style={[styles.buttonModal, { position: 'absolute', bottom: 20 },]}>
                <Text style={styles.buttonText}>Restablecer</Text>
              </TouchableOpacity>
            </View>
          </Modal>
        </View>

        {/* Modal para agregar una nueva ciudad */}
        <Modal
          animationType="slide"
          transparent={true}
          visible={modalVisible}
          onRequestClose={closeModal}
          >
          <View style={styles.modalContainer}>
            {/* Botón para cerrar el modal */}
            <TouchableOpacity onPress={closeModal} style={styles.closeButton}>
              <AntDesign name="close" size={20} color="white" />
            </TouchableOpacity>
            
            {/* Campos para agregar detalles de la nueva ciudad */}
            <TextInput
                style={styles.input}
                onChangeText={text => setName(text)}
                value={name}
                placeholder="Ciudad"
            />
            <TextInput
                style={styles.input}
                onChangeText={text => setDay(text)}
                value={day}
                placeholder="Día"
            />
            <TextInput
                style={styles.input}
                onChangeText={text => setAccommodation(text)}
                value={accommodation}
                placeholder="Alojamiento"
            />
            <TextInput
                style={styles.input}
                onChangeText={text => setActivities(text)}
                value={activities}
                placeholder="Actividades"
            />
            <TextInput
                style={styles.descriptionInput}
                onChangeText={text => setDescription(text)}
                value={description}
                placeholder="Descripción"
                multiline={true} 
            />

            {/* Botón para seleccionar un archivo */}
            <TouchableOpacity onPress={selectMedia} style={[styles.buttonModal, { marginBottom: 10 }]}>
              <Text style={styles.buttonText}>Seleccionar archivo</Text>
            </TouchableOpacity>
            {/* Condición para mostrar imagen o video */}
            {mediaUri && (
              <View style={{ alignItems: 'center' }}>
                {mediaUri.startsWith('data:image/') ? (
                  <>
                    <Image source={{ uri: mediaUri }} style={{ width: 180, height: 150 }} />
                    <Text style={{ marginTop: 5 }}>Imagen cargada</Text>
                  </>
                ) : mediaUri.startsWith('data:video/') ? (
                  <>
                    <Image source={require('../../assets/video2.jpg')} style={{ width: 180, height: 150 }} />
                    <Text style={{ marginTop: 5 }}>Video cargado</Text>
                  </>
                ) : null}
              </View>
            )}

            {/* Botón para guardar los detalles de la nueva ciudad */}
            <TouchableOpacity onPress={addCityDetails} style={[styles.buttonModal, { marginTop: 10 }]}>
              <Text style={styles.buttonText}>Guardar registro </Text>
            </TouchableOpacity>

            {/* Botón para restablecer los campos del modal */}
            {!keyboardVisible && (
              <TouchableOpacity onPress={resetFields} style={[ styles.buttonModal, { position: 'absolute', bottom: 20 },]}>
                <Text style={styles.buttonText}>Restablecer</Text>
              </TouchableOpacity>
            )}
          </View>
        </Modal>
      </View>
    </ScrollView>


Remunerada: No

Turno o jornada: Indiferente

Horario: Preferiblemente mañanas

Horas totales: 300

Horas diarias: 4

Descripción del departamento o centro de prácticas

Descripción del proyecto

Chordata Tech es una empresa dedicada a la producción de sistemas de captura de movimiento (mocap) Open Source. Nuestro objetivo es lograr que la tecnología del Mocap sea accesible a cualquier persona en el planeta. Nuestra principal oferta consiste en un framework hardware/software que permite crear trajes de captura de movimiento basados en tecnología inercial.

¿Qué buscamos?

Un estudiante o graduado reciente con conocimientos en programación y gestión de sistemas, con ganas de descubrir los funcionamientos internos de nuestro framework y de los sistemas de captura de movimiento en general.

En la disciplina en la cual nos movemos se ven entremezclados conocimientos propios de diversos ámbitos del desarrollo de software:

Videojuegos: gestion de personajes 3D e integración con motores de desarrollo.
Embedded: desarrollo orientado al control hardware a bajo nivel.
Backend: Comunicación entre servicios en IPC y remotos.
El trabajo a desarrollar:

Nuestro framework cuenta con una creciente base de usuarios en todo el mundo que lo implementa y reelabora bajo el paradigma del Open Source, aunque todavía se trata de una release Beta. Nuestro equipo está trabajando en la reestructuración de nuestra base de código con miras a la publicación de la primera versión comercial del sistema, prevista para el 2023.

En una primera instancia, el rol del candidato será acompañar al equipo de desarrolladores en la optimización de la base de código en modo transversal. En una segunda etapa, abriremos la posibilidad de que el candidato se incorpore a otras áreas de desarrollo.

¡Atención! Esta oferta requiere un proceso selectivo. Hay que enviar un cv a la dirección de correo bruno@chordata.cc con copia a flavia@chordata.cc 

Tareas que realizará el estudiante

¿Qué aprenderás?

En el día a día de Chordata están entremezclados conocimientos propios de diversos ámbitos del desarrollo de software. Adquirirás conocimientos prácticos en una o varias de las siguientes áreas de aplicación: 

Embedded: desarrollo orientado al control hardware a bajo nivel. Trabajamos con lenguajes como  C o C++ para realizar las aplicaciones a cargo de la gestión de sensores y comunicación entre cictuitos integrados.

CGI/videojuegos: gestion de personajes 3D e integración con motores de desarrollo. El objetivo de nuestro framework es generar datos que puedan ser visualizados como una armadura 3D en movimiento, para esto manipulamos herramientas standard en la industria como matrices, quaterniones, sistemas de coordenadas anidados, etc. 

Backend: comunicación entre servicios en IPC y remotos. Nuestro framework esta estructurado como una serie de servicios especializados que colaboran intercambiando mensajes. Esta configuración se inspira en la arquitectura de microservices. Gran parte de nuestro software funciona en sistemas Linux, que gestionamos como servers en una LAN
Otros requisitos del candidato

Persona proactiva y comprometida

Capacidad rápida de aprendizaje

Valoraremos positivamente una o más de estas características, aunque no son un requisito indispensable:

Linux user o compromiso con la filosofía del software libre ;)

Experiencia con el software Blender

Experiencia con uso de Raspberry Pi o plataformas embedded tipo Arduino

Interés por la manipulación matemática en ámbito CGI (uso de matrices, etc)

Interés por los ámbitos de la inteligencia artificial y el machine learning

leer menos